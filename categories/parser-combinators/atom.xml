<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title><![CDATA[Coder Consortium]]></title><link href="http://www.coderconsortium.com/categories/parser-combinators/atom.xml" rel="self"/><link href="http://www.coderconsortium.com/"/><updated>2014-06-03T16:32:33-07:00</updated><id>http://www.coderconsortium.com/</id><author><name><![CDATA[Steve Holmes]]></name></author><generator uri="http://sysgears.com/grain/">Grain</generator><entry><title type="html"><![CDATA[July 3rd Meeting: Corey Minter - Parser Combinators in Scala]]></title><link href="http://www.coderconsortium.com/blog/2014/06/28/july-3rd-meeting-corey-minter-parser-combinators-in-scala/"/><updated>2014-06-28T17:04:52-07:00</updated><id>/blog/2014/06/28/july-3rd-meeting-corey-minter-parser-combinators-in-scala/</id><content type="html"><![CDATA[<p>Parser Combinators in Scala</p>
<p>Scala provides a library (and DSL) which allows easily adding this recursive descent parsing strategy directly in your application (no separate tools required).  You'll see how parser combinators differ from other parsing methods.  A code demo will show you how to implement a grammar then extend that into 'useful' actions.</p>
]]></content></entry></feed>